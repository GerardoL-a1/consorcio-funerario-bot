# -*- coding: utf-8 -*-
from flask import Flask, request
from twilio.twiml.messaging_response import MessagingResponse
from planes_info import responder_plan
import requests
import os
import threading

app = Flask(__name__)

TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN")
TWILIO_MESSAGING_URL = f"https://api.twilio.com/2010-04-01/Accounts/{TWILIO_ACCOUNT_SID}/Messages.json"
TWILIO_AUTH = (TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN)
NUMERO_REENVIO = "+525523604519"

sesiones = {}
temporizadores = {}

@app.route("/", methods=["GET"])
def home():
    return "‚úÖ Bot Consorcio Funerario funcionando."

MENSAJE_BIENVENIDA = """üëã *Bienvenido a Consorcio Funerario*

Gracias por escribirnos.

Por favor ind√≠quenos *en qu√© le gustar√≠a recibir informaci√≥n o en qu√© podemos apoyarle*:
- Atenci√≥n inmediata por *emergencia*
- Conocer nuestros *servicios funerarios*
- Consultar nuestras *ubicaciones disponibles*

üìå Puede escribir palabras como: *emergencia*, *planes*, *servicios*, *ubicaci√≥n*, etc."""

# Diccionario de letras -> servicio
selecciones_letras = {
    **{k: "cr√©dito de necesidad inmediata" for k in ["A", "a"]},
    **{k: "servicio paquete fetal cremaci√≥n" for k in ["B", "b"]},
    **{k: "servicio paquete sencillo sepultura" for k in ["C", "c"]},
    **{k: "servicio paquete b√°sico sepultura" for k in ["D", "d"]},
    **{k: "servicio cremaci√≥n directa" for k in ["E", "e"]},
    **{k: "servicio paquete de cremaci√≥n" for k in ["F", "f"]},
    **{k: "servicio paquete legal" for k in ["G", "g"]},
    **{k: "servicio de refrigeraci√≥n y conservaci√≥n" for k in ["H", "h"]},
    **{k: "red biker" for k in ["I", "i"]},
    **{k: "red plus" for k in ["J", "j"]},
    **{k: "red consorcio" for k in ["K", "k"]},
    **{k: "red adulto mayor" for k in ["L", "l"]},
    **{k: "preventa de nichos a temporalidad" for k in ["M", "m"]},
    **{k: "traslado" for k in ["N", "n"]},
    **{k: "ata√∫d" for k in ["O", "o"]},
    **{k: "urna" for k in ["P", "p"]},
    **{k: "velaci√≥n" for k in ["Q", "q"]},
    **{k: "boletas" for k in ["R", "r"]},
    **{k: "carroza local" for k in ["S", "s"]},
    **{k: "carroza a pante√≥n u horno crematorio" for k in ["T", "t"]},
    **{k: "carroza legal" for k in ["U", "u"]},
    **{k: "cami√≥n local" for k in ["V", "v"]},
    **{k: "embalsamado" for k in ["W", "w"]},
    **{k: "embalsamado legal" for k in ["X", "x"]},
    **{k: "embalsamado infecto-contagiosa" for k in ["Y", "y"]},
    **{k: "tr√°mites de inhumaci√≥n" for k in ["Z", "z"]},
    **{k: "tr√°mites de cremaci√≥n" for k in ["AA", "aa", "Aa", "aA"]},
    **{k: "tr√°mites legales" for k in ["AB", "ab", "Ab", "aB"]},
    **{k: "tr√°mites de traslado" for k in ["AC", "ac", "Ac", "aC"]},
    **{k: "tr√°mites de internaci√≥n nacional" for k in ["AD", "ad", "Ad", "aD"]},
    **{k: "tr√°mites de internaci√≥n internacional" for k in ["AE", "ae", "Ae", "aE"]},
    **{k: "equipo de velaci√≥n" for k in ["AF", "af", "Af", "aF"]},
    **{k: "cirios" for k in ["AG", "ag", "Ag", "aG"]},
    **{k: "capilla de gobierno" for k in ["AH", "ah", "Ah", "aH"]},
    **{k: "capilla particular" for k in ["AI", "ai", "Ai", "aI"]},
    **{k: "traslado carretero por km" for k in ["AJ", "aj", "Aj", "aJ"]},
    **{k: "traslado de terracer√≠a por km" for k in ["AK", "ak", "Ak", "aK"]},
    **{k: "cami√≥n for√°neo por km" for k in ["AL", "al", "Al", "aL"]},
}

claves_planes = ["plan", "planes", "servicio", "servicios", "paquete", "informaci√≥n", "informacion"]
claves_emergencia = [
    "emergencia", "urgente", "fallecido", "muri√≥", "murio", "accidente", "suceso",
    "acaba de fallecer", "mi pap√° falleci√≥", "mi mam√° muri√≥", "muri√≥ mi", "falleci√≥ mi",
    "necesito ayuda con un funeral", "necesito apoyo", "ay√∫denos", "urgente apoyo", "acaba de morir"
]
claves_ubicacion = ["ubicaci√≥n", "ubicaciones", "sucursal", "sucursales", "direcci√≥n", "direccion"]
claves_volver = ["volver", "men√∫", "menu", "inicio", "meno", "menj", "inickp", "ect", "etc"]
claves_cierre = ["gracias", "ok", "vale", "de acuerdo", "listo", "perfecto", "entendido", "muy bien"]

def contiene(palabras, mensaje):
    return any(p in mensaje.lower() for p in palabras)

def responder(texto):
    respuesta = MessagingResponse()
    respuesta.message(texto)
    return str(respuesta)

def mensaje_inactividad(numero):
    if numero in sesiones:
        requests.post(TWILIO_MESSAGING_URL, auth=TWILIO_AUTH, data={
            "To": numero,
            "From": "whatsapp:+14155238886",
            "Body": "‚åõ ¬øA√∫n est√°s ah√≠? Si necesitas ayuda, escribe *men√∫* para volver al inicio."
        })
        temporizadores.pop(numero, None)

@app.route("/webhook", methods=["POST"])
def webhook():
    mensaje = request.form.get("Body", "").strip()
    telefono = request.form.get("From", "")
    estado = sesiones.get(telefono, {})
    msj_lower = mensaje.lower()

    if not mensaje:
        return responder("‚ùó No recibimos texto. Por favor escribe tu mensaje.")

    if telefono in temporizadores:
        temporizadores[telefono].cancel()
        del temporizadores[telefono]
    temporizador = threading.Timer(600, mensaje_inactividad, args=(telefono,))
    temporizador.start()
    temporizadores[telefono] = temporizador

    if contiene(claves_volver, msj_lower):
        sesiones[telefono] = {}
        return responder(MENSAJE_BIENVENIDA)

    if contiene(claves_cierre, msj_lower):
        return responder("üëå Gracias por confirmar. Si necesitas algo m√°s, puedes escribir *men√∫* para volver a empezar o seleccionar otra opci√≥n.")

    if not estado:
        if contiene(claves_emergencia, msj_lower):
            sesiones[telefono] = {"menu": "emergencia"}
            return responder("""üö® *ATENCI√ìN INMEDIATA*

Por favor responde con los siguientes datos:
üîπ Nombre de la persona que nos est√° contactando""")

        elif contiene(claves_ubicacion, msj_lower):
            sesiones[telefono] = {"menu": "ubicacion"}
            return responder("""üìç *Ubicaciones disponibles:*
1. Av. Tl√°huac No. 5502, Col. El Rosario, CDMX
2. Av. Zacatl√°n No. 60, Col. San Lorenzo Tezonco, CDMX
3. Av. Zacatl√°n No. 10, Col. San Lorenzo Tezonco, CDMX

¬øDeseas agendar una cita en alguna de nuestras sucursales? (S√≠ / No)""")

        elif contiene(claves_planes, msj_lower):
            sesiones[telefono] = {"menu": "planes"}
            return responder("""üìã *Selecciona una categor√≠a:*
1. Planes de necesidad inmediata
2. Planes a futuro
3. Servicios individuales""")

        return responder(MENSAJE_BIENVENIDA)

    if estado.get("menu") == "emergencia":
        alerta = f"""üì® *NUEVA EMERGENCIA FUNERARIA*

{mensaje}


"""

        # Enviar a n√∫mero principal
        requests.post(TWILIO_MESSAGING_URL, auth=TWILIO_AUTH, data={
            "To": NUMERO_REENVIO,
            "From": "whatsapp:+14155238886",
            "Body": alerta
        })

        # Enviar a n√∫mero secundario
        requests.post(TWILIO_MESSAGING_URL, auth=TWILIO_AUTH, data={
            "To": "+525523680734",
            "From": "whatsapp:+14155238886",
            "Body": alerta
        })
        sesiones[telefono] = {}
        return responder("‚úÖ Gracias. Hemos recibido tu emergencia. Un asesor te contactar√° de inmediato.")

    if estado.get("menu") == "ubicacion":
        if msj_lower in ["s√≠", "si"]:
            sesiones[telefono] = {"menu": "cita"}
            return responder("""üìÖ *Agendemos tu cita.*

¬øQu√© d√≠a te gustar√≠a visitarnos?
¬øEn qu√© horario podr√≠as acudir?

Tu informaci√≥n ser√° enviada a nuestro equipo.""")
        else:
            sesiones[telefono] = {}
            return responder("‚úÖ Gracias por consultar nuestras ubicaciones. Si necesitas otra informaci√≥n, escribe *men√∫*.")

    if estado.get("menu") == "cita":
        datos = f"üìÜ *CITA SOLICITADA*\nCliente: {telefono}\nDatos: {mensaje}"
        requests.post(TWILIO_MESSAGING_URL, auth=TWILIO_AUTH, data={
            "To": NUMERO_REENVIO,
            "From": "whatsapp:+14155238886",
            "Body": datos
        })
        sesiones[telefono] = {}
        return responder("‚úÖ Gracias. Hemos registrado tu solicitud. Nuestro equipo te contactar√° pronto.")

    if estado.get("menu") == "planes":
        if mensaje == "1":
            sesiones[telefono] = {"submenu": "inmediato"}
            return responder("""‚è±Ô∏è *Planes de necesidad inmediata:*
A. Cr√©dito de necesidad inmediata
B. Servicio paquete fetal cremaci√≥n
C. Servicio paquete sencillo sepultura
D. Servicio paquete b√°sico sepultura
E. Servicio cremaci√≥n directa
F. Servicio paquete de cremaci√≥n
G. Servicio paquete legal
H. Servicio de refrigeraci√≥n y conservaci√≥n

Escribe la letra correspondiente para m√°s informaci√≥n.""")""")

        elif mensaje == "2":
            sesiones[telefono] = {"submenu": "futuro"}
            return responder("üï∞Ô∏è *Planes a futuro:*
I. Red Biker
J. Red Plus
K. Red Consorcio
L. Red Adulto Mayor
M. Preventa de Nichos a Temporalidad

Escribe la letra correspondiente para m√°s informaci√≥n.")

        elif mensaje == "3":
            sesiones[telefono] = {"submenu": "servicios", "menu_serv": "categorias"}
            return responder("""üß∞ *Servicios Individuales* - Selecciona una categor√≠a:

‚ö∞Ô∏è C. Objetos y Equipamiento  

Escribe la letra correspondiente para continuar (A, B, C o D).""")
            return responder("""üß∞ *Servicios individuales:*
N. Traslado
O. Ata√∫d
P. Urna
Q. Velaci√≥n
R. Boletas
S. Carroza local
T. Carroza a pante√≥n u horno crematorio
U. Carroza legal
V. Cami√≥n local
W. Embalsamado
X. Embalsamado legal
Y. Embalsamado infecto-contagiosa
Z. Tr√°mites de inhumaci√≥n
AA. Tr√°mites de cremaci√≥n
AB. Tr√°mites legales
AC. Tr√°mites de traslado
AD. Tr√°mites de internaci√≥n nacional
AE. Tr√°mites de internaci√≥n internacional
AF. Equipo de velaci√≥n
AG. Cirios
AH. Capilla de gobierno
AI. Capilla particular
AJ. Traslado carretero por km
AK. Traslado de terracer√≠a por km
AL. Cami√≥n for√°neo por km

Escribe la letra correspondiente para m√°s informaci√≥n.""")

        return responder("‚úçÔ∏è Escribe la letra del plan o servicio que deseas consultar (por ejemplo A, b, AL, etc).")

    if estado.get("submenu"):
        letra = mensaje.strip().replace(" ", "")
        if letra in selecciones_letras:
            clave = selecciones_letras[letra]
            respuesta = responder_plan(clave)
            return responder(respuesta)
        else:
            return responder("‚ùå No reconocimos tu selecci√≥n. Intenta con otra letra o palabra clave.")

    return responder(MENSAJE_BIENVENIDA)

    if estado.get("submenu") == "servicios":
        letra = mensaje.strip().upper()

        if estado.get("menu_serv") == "categorias":
            if letra == "A":
                sesiones[telefono]["menu_serv"] = "tramites"
                return responder("""üìÑ *Tr√°mites y Papeler√≠a:*
Z. Tr√°mites de inhumaci√≥n  
AA. Tr√°mites de cremaci√≥n  
AB. Tr√°mites legales  
AC. Tr√°mites de traslado  
AD. Tr√°mites de internaci√≥n nacional  
AE. Tr√°mites de internaci√≥n internacional

‚úçÔ∏è Escribe la letra correspondiente para m√°s informaci√≥n o *volver* para regresar.""")
            elif letra == "B":
                sesiones[telefono]["menu_serv"] = "traslados"
                return responder("""üöö *Traslados y Carrozas:*
N. Traslado  
S. Carroza local  
T. Carroza a pante√≥n u horno crematorio  
U. Carroza legal  
V. Cami√≥n local  
AJ. Traslado carretero por km  
AK. Traslado de terracer√≠a por km  
AL. Cami√≥n for√°neo por km

‚úçÔ∏è Escribe la letra correspondiente para m√°s informaci√≥n o *volver* para regresar.""")
            elif letra == "C":
                sesiones[telefono]["menu_serv"] = "equipamiento"
                return responder("""‚ö∞Ô∏è *Objetos y Equipamiento:*
O. Ata√∫d  
P. Urna  
AF. Equipo de velaci√≥n  
AG. Cirios  
AH. Capilla de gobierno  
AI. Capilla particular

‚úçÔ∏è Escribe la letra correspondiente para m√°s informaci√≥n o *volver* para regresar.""")
            elif letra == "D":
                sesiones[telefono]["menu_serv"] = "procedimientos"
                return responder("""üß™ *Procedimientos Especiales:*
Q. Velaci√≥n  
R. Boletas  
W. Embalsamado  
X. Embalsamado legal  
Y. Embalsamado infecto-contagiosa

‚úçÔ∏è Escribe la letra correspondiente para m√°s informaci√≥n o *volver* para regresar.""")
            else:
                return responder("‚ùå Opci√≥n no v√°lida. Por favor escribe A, B, C o D para seleccionar una categor√≠a.")

        elif estado.get("menu_serv") in ["tramites", "traslados", "equipamiento", "procedimientos"]:
            if letra in selecciones_letras:
                clave = selecciones_letras[letra]
                return responder(responder_plan(clave))
            else:
                return responder("‚ùå Letra no reconocida. Intenta de nuevo o escribe *volver* para regresar.")

    return responder(MENSAJE_BIENVENIDA)